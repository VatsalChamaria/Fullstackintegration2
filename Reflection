Building InventoryHub was a multi-step journey, and Microsoft Copilot served as my reliable guide and collaborator at every turn.
From the beginning, Copilot helped me structure the integration between front-end and back-end systems. When I encountered a mismatch in the API route, Copilot immediately pinpointed the issue and guided me in updating the front-end call to match the new back-end endpoint (/api/productlist). It also helped resolve CORS errors by showing exactly how to configure the middleware in the Program.cs file — something that would have taken hours to trial-and-error on my own.
As the application progressed, Copilot simplified error handling by walking me through JSON deserialization logic using try-catch blocks, making sure the app was resilient to malformed or unexpected responses.
Then came a more structured requirement: building a standard JSON format from the back-end. Copilot generated perfectly structured nested JSON with product and category objects. Beyond that, it recommended moving from anonymous types to strong models for better maintainability, which gave my codebase a cleaner and more scalable foundation.
When performance became the focus, Copilot showed me how to optimize front-end API usage using shared services and advised on caching strategies like IMemoryCache in the back end. It even suggested architectural improvements, such as isolating repetitive fetch logic into services and adopting clean error-logging practices.
Throughout the development process, Copilot didn’t just solve problems — it explained solutions, offered alternatives, and helped me think like a software architect. From debugging to optimization, Copilot turned code obstacles into learning moments, and helped shape InventoryHub into a more robust and user-friendly application.


